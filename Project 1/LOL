% Project 1 Initial Conditions
tic;
% Initial Conditions

w_0 = 1.0;
J = 1;
A = 1;
b = 1;

dT = [0.001, 0.1, 1];
solver = ["ode1", "ode4"];

for i = 1:2
    for j = 1:3
        simout = sim("P1_pt1.slx", "Solver", solver(i), "FixedStep", string(dT(j)));
        
        W = simout.w.Data;
        W_DOT = simout.w_dot.Data;
        T = simout.tout;
        
        plot(W,T)
        hold on        
    end
    hold off
    figure;
end

for i = 1:2
    for j = 1:3
        simout = sim("P1_pt1.slx", "Solver", solver(i), "FixedStep", string(dT(j)));
        
        W = simout.w.Data;
        W_DOT = simout.w_dot.Data;
        T = simout.tout;
        
        plot(W_DOT,T)
        hold on
    end
    hold off
    figure;    
end
toc

t_min = 0;
t_max = 25;
time_step = 0.001;
t = min(t_min): time_step:max(t_max, t_min);
t(end) = t_max;


% ðŸŸ© Step 1: Run the simulation and capture simulated rotational speed data
simOut = sim('P1_pt1.slx', 'SaveOutput', 'on', 'OutputSaveName', 'W');
data = simOut.get('W');
sim_rotational_speed = data.get('W'); % Ensure this name matches your Simulink model

% ðŸŸ¦ Step 2: Define your theoretical rotational speed model
% This function calculates the theoretical speed based on time
% Replace the body of this function with your actual theoretical formula
calculate_theoretical_speed = @(t) (A/b)*(1-exp(-b*t/J))+w_0*exp(-b*t/J)
theoretical_speed = arrayfun(calculate_theoretical_speed, simOut.tout); % Replace with your formula

% Calculate theoretical speeds at each time point from the simulation
theoretical_speeds = arrayfun(@(t) calculate_theoretical_speed(t), simOut.tout);

% ðŸŸ¥ Step 3: Calculate the error and find the maximum error
errors = abs(sim_rotational_speed - theoretical_speeds); % Absolute difference between simulated and theoretical speeds
max_error = max(errors); % Find the maximum error
fprintf('Maximum error: %f\n', max_error); % Display the maximum error
