% Assuming W_theoretical is a function that computes the theoretical W given T
W_theoretical = @(T) ... % define the theoretical model here

max_errors = zeros(2, 3); % to store maximum errors for each solver and dT combination

for i = 1:2
    for j = 1:3
        simout = sim("P1_pt1.slx", "Solver", solver(i), "FixedStep", string(dT(j)));
        
        W = simout.w.Data;
        T = simout.tout;
        
        % Calculate the theoretical W for the given T
        W_theo = arrayfun(W_theoretical, T);
        
        % Calculate the error
        error = abs(W - W_theo);
        
        % Find and store the maximum error
        max_errors(i, j) = max(error);
        
        % Plotting the simulated W and the error
        subplot(2,1,1);
        plot(T, W)
        hold on
        plot(T, W_theo, '--')
        hold off
        title(['W vs T for solver ' char(solver(i)) ' and dT ' num2str(dT(j))])
        xlabel('Time (T)')
        ylabel('W')
        legend('Simulated W', 'Theoretical W')
        
        subplot(2,1,2);
        plot(T, error)
        title('Error over time')
        xlabel('Time (T)')
        ylabel('Error')
        
        % Pause between plots for clarity
        pause(1)
        
        figure;
    end
end

% Display the maximum errors
disp('Maximum errors for each solver and dT combination:')
disp(max_errors)

Error using P1P1_2
Error due to multiple causes.
Caused by:
    Error using P1P1_2
    Simulink cannot determine sizes and/or types of the outputs for block 'P1_pt1_2/MATLAB Function' due to errors in the block body, or limitations of the
    underlying analysis. The errors might be inaccurate. Fix the indicated errors, or explicitly specify sizes and/or types for all block outputs.
    Error using P1P1_2
    Error in port widths or dimensions. 'Output Port 1' of 'P1_pt1_2/MATLAB Function/w' has 2 elements.  This port does not accept the dimensions (or orientation)
    specified by the output signal.






% Initial Conditions
w_0 = [10, 0];
J = [100, 0.01];
A = [0, 100];
b = [10, 0.1];
freq = [0.1, 100];

% Nested loops for each variable
for w0_index = 1:length(w_0)
    for J_index = 1:length(J)
        for A_index = 1:length(A)
            for b_index = 1:length(b)
                for freq_index = 1:length(freq)
                    % Set the parameters in the Simulink model
                    set_param('P1_pt1_2/...', 'w_0', num2str(w_0(w0_index))); % Update with actual block parameter names
                    set_param('P1_pt1_2/...', 'J', num2str(J(J_index)));
                    set_param('P1_pt1_2/...', 'A', num2str(A(A_index)));
                    set_param('P1_pt1_2/...', 'b', num2str(b(b_index)));
                    set_param('P1_pt1_2/...', 'freq', num2str(freq(freq_index)));
                    
                    % Run the simulation with the current set of parameters
                    simout = sim('P1_pt1_2.slx');
                    
                    % Extract the data from the simulation
                    W = simout.get('w').Data;
                    W_DOT = simout.get('w_dot').Data;

                    % ... (any additional code for processing the results)
                end
            end
        end
    end
end






% Initial Conditions
w_0_values = [10, 0];
J_values = [100, 0.01];
A_values = [0, 100];
b_values = [10, 0.1];
dT = [0.001, 0.1, 1];
solver = ["ode1", "ode4"];

% Figure index
figIndex = 1;

% Nested loops for each combination of w_0, J, A, b, dT, and solver
for w0_index = 1:2
    for J_index = 1:2
        for A_index = 1:2
            for b_index = 1:2
                for dT_index = 1:length(dT)
                    for solver_index = 1:length(solver)
                        % Set the parameters for the simulation
                        w_0 = w_0_values(w0_index);
                        J = J_values(J_index);
                        A = A_values(A_index);
                        b = b_values(b_index);
                        currentSolver = solver(solver_index);
                        currentdT = dT(dT_index);

                        % Run the simulation
                        simout = sim('P1_pt1_2.slx', 'Solver', currentSolver, 'FixedStep', string(currentdT));
                        
                        % Extract data from simulation output
                        W = simout.get('W').signals.values;
                        W_DOT = simout.get('W_DOT').signals.values;
                        T = simout.get('tout');

                        % Plot the results for W
                        figure(figIndex);
                        subplot(2,1,1); % upper plot
                        plot(T, W);
                        title(['W for Solver: ', currentSolver, ', dT: ', num2str(currentdT)]);
                        xlabel('Time');
                        ylabel('W');
                        grid on;
                        
                        % Plot the results for W_DOT
                        subplot(2,1,2); % lower plot
                        plot(T, W_DOT);
                        title(['W\_DOT for Solver: ', currentSolver, ', dT: ', num2str(currentdT)]);
                        xlabel('Time');
                        ylabel('W\_DOT');
                        grid on;
                        
                        % Increment figure index for next plot
                        figIndex = figIndex + 1;
                    end
                end
            end
        end
    end
end




% Initial Conditions
w_0_values = [10, 0];
J_values = [100, 0.01];
A_values = [0, 100];
b_values = [10, 0.1];
dT = [0.001, 0.1, 1];
solver = ["ode1", "ode4"];

% Loop through each combination of variables
for w0_index = 1:2
    for J_index = 1:2
        for A_index = 1:2
            for b_index = 1:2
                for dT_index = 1:length(dT)
                    for solver_index = 1:length(solver)
                        % Set the parameters for the simulation
                        w_0 = w_0_values(w0_index);
                        J = J_values(J_index);
                        A = A_values(A_index);
                        b = b_values(b_index);
                        currentSolver = solver(solver_index);
                        currentdT = dT(dT_index);

                        % Run the simulation
                        simOut = sim('P1_pt1_2', ...
                                     'Solver', char(currentSolver), ...
                                     'FixedStep', num2str(currentdT), ...
                                     'StopTime', '10'); % Adjust StopTime as needed
                        
                        % Assuming the To Workspace blocks are named 'outw' and 'outw_dot'
                        W = simOut.get('outw');
                        W_DOT = simOut.get('outw_dot');
                        T = simOut.tout;

                        % Create a new figure for each combination
                        figure;
                        
                        % Plot W
                        subplot(2, 1, 1);
                        plot(T, W);
                        title(sprintf('W with Solver: %s, dT: %g, w_0: %g, J: %g, A: %g, b: %g', ...
                            currentSolver, currentdT, w_0, J, A, b));
                        xlabel('Time (s)');
                        ylabel('W (rad/s)');
                        
                        % Plot W_DOT
                        subplot(2, 1, 2);
                        plot(T, W_DOT);
                        title(sprintf('W_DOT with Solver: %s, dT: %g, w_0: %g, J: %g, A: %g, b: %g', ...
                            currentSolver, currentdT, w_0, J, A, b));
                        xlabel('Time (s)');
                        ylabel('W_DOT (rad/s^2)');
                        
                        % Adjust layout
                        tight_layout();

                        % Uncomment the next line to save figures as files
                        % saveas(gcf, sprintf('SimOutput_%d_%d_%d_%d_%d_%d.fig', w0_index, J_index, A_index, b_index, dT_index, solver_index));
                    end
                end
            end
        end
    end
end
















% Project 1 Initial Conditions
tic;

% Initial Conditions
w_0 = [10, 0];
J = [100, 0.01];
A = [0, 100];
b = [10, 0.1];
freq = [0.1, 100];

dT = [0.001, 0.1, 1];
solver = ["ode1", "ode4"];

% Loop through each combination of variables
for w0_index = 1:2
    for J_index= 1:2
        for A_index= 1:2
            for b_index= 1:2
                for solver_index = 1:2
                    for dT_index= 1:3
                        % Set the parameters for the simulation
                        w_0 = w_0(w0_index);
                        J = J(J_index);
                        A = A(A_index);
                        b = b(b_index);
                        currentSolver = solver(solver_index);
                        currentdT = dT(dT_index);

                        % Run the simulation
                        simOut = sim('P1_pt1_2', ...
                                     'Solver', char(currentSolver), ...
                                     'FixedStep', num2str(currentdT)); % Adjust StopTime as needed
                        
                        % Assuming the To Workspace blocks are named 'outw' and 'outw_dot'
                        W = simout.w.Data;
                        W_DOT = simout.w_dot.Data;
                        T = simout.tout;

                        % Create a new figure for each combination
                        figure;
                        
                        % Plot W
                        subplot(2, 1, 1);
                        plot(T, W);
                        title(sprintf('W with Solver: %s, dT: %g, w_0: %g, J: %g, A: %g, b: %g', ...
                            currentSolver, currentdT, w_0, J, A, b));
                        xlabel('Time (s)');
                        ylabel('W (rad/s)');
                        
                        % Plot W_DOT
                        subplot(2, 1, 2);
                        plot(T, W_DOT);
                        title(sprintf('W_DOT with Solver: %s, dT: %g, w_0: %g, J: %g, A: %g, b: %g', ...
                            currentSolver, currentdT, w_0, J, A, b));
                        xlabel('Time (s)');
                        ylabel('W_DOT (rad/s^2)');
                        
                     

                        % Uncomment the next line to save figures as files
                        % saveas(gcf, sprintf('SimOutput_%d_%d_%d_%d_%d_%d.fig', w0_index, J_index, A_index, b_index, dT_index, solver_index));
                    end
                end
            end
        end
    end
end
toc









% Project 1 Initial Conditions
tic;

% Initial Conditions
w_0_values = [10, 0];
J_values = [100, 0.01];
A_values = [0, 100];
b_values = [10, 0.1];
freq_values = [0.1, 100];  % Assuming you might use it later

dT = [0.001, 0.1, 1];
solver = ["ode1", "ode4"];

% Loop through each combination of variables
for w0_index = 1:2
    for J_index = 1:2
        for A_index = 1:2
            for b_index = 1:2
                for solver_index = 1:2
                    for dT_index = 1:3
                        % Set the parameters for the simulation
                        w_0_param = w_0_values(w0_index);
                        J_param = J_values(J_index);
                        A_param = A_values(A_index);
                        b_param = b_values(b_index);
                        currentSolver = solver(solver_index);
                        currentdT = dT(dT_index);

                        % Run the simulation
                        simOut = sim('P1_pt1_2', ...
                                     'Solver', char(currentSolver), ...
                                     'FixedStep', num2str(currentdT)); % Adjust StopTime as needed
                        
                        % Extract data from the simulation output
                        % Assuming the To Workspace blocks are named 'outw' and 'outw_dot'
                        W = simOut.yout{1}.Values.Data;  % Adjust the index based on the signal order
                        W_DOT = simOut.yout{2}.Values.Data;  % Adjust the index based on the signal order
                        T = simOut.tout;

                        % Create a new figure for each combination
                        figure;
                        
                        % Plot W
                        subplot(2, 1, 1);
                        plot(T, W);
                        title(sprintf('W with Solver: %s, dT: %g, w_0: %g, J: %g, A: %g, b: %g', ...
                            currentSolver, currentdT, w_0_param, J_param, A_param, b_param));
                        xlabel('Time (s)');
                        ylabel('W (rad/s)');
                        
                        % Plot W_DOT
                        subplot(2, 1, 2);
                        plot(T, W_DOT);
                        title(sprintf('W_DOT with Solver: %s, dT: %g, w_0: %g, J: %g, A: %g, b: %g', ...
                            currentSolver, currentdT, w_0_param, J_param, A_param, b_param));
                        xlabel('Time (s)');
                        ylabel('W_DOT (rad/s^2)');

                        % Uncomment the next line to save figures as files
                        % saveas(gcf, sprintf('SimOutput_%d_%d_%d_%d_%d_%d.fig', w0_index, J_index, A_index, b_index, dT_index, solver_index));
                    end
                end
            end
        end
    end
end
toc